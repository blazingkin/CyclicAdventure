require GameState
require Player
require Class
import GameUtil

:main
    print("Welcome to cyclic adventure!!")
    print("You can quit at any time by typing -1")
    print_seperator()
    gs = setup_game()
    while loop!(gs)
    end
end

:loop(game_state)
    prompt(game_state)
    input = number_input()
    if input == -1
        return false
    end
    process_input!(game_state, input)
    if game_state.player.get_health() <= 0
        print("You have died! Try again!")
        return false
    end
    return true
end

:prompt(game_state)   
    if game_state.location == game_state.overworld
        game_state.describe_level()
        game_state.print_options()
    else if game_state.location == game_state.combat
        game_state.describe_combat()
    end
end

# This is the first state of the game.
:setup_game()

    # Prompt the player for characteristics
    print("What is your name?")
    name = string_input()
    print_seperator()
    valid = false
    while valid != true
        print("What is your class?")
        classes().each(x, i -> print(i+". "+x))
        class_number = number_input()
        valid = class_number < classes().size()
    end
    print_seperator()
    player = Player(name, class_name(class_number))
    print("Welcome "+player)
    string_input()

    print_seperator()
    print("How many rooms do you want to play with?")
    valid = false
    while valid != true
        num_levels = number_input()
        valid = num_levels > 0
    end
    print_seperator()
    GameState(player, num_levels)
end

:process_input(game_state, input)
    if game_state.location == game_state.overworld
        if input >= game_state.current_level().number_of_options() || input < 0
            print("Please enter a valid option")
            return ""
        end
        game_state.current_level().execute_option(input, game_state)
        print_seperator()
    else if game_state.location == game_state.combat
        game_state.get_combat_state().next()
        if game_state.get_combat_state().over?()
            game_state.end_combat()
        end
        game_state.get_combat_state().enemies_take_turn()
        game_state.get_combat_state().next()
        if game_state.get_combat_state().over?()
            game_state.end_combat()
        end
    end
end