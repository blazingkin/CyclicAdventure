import GameUtil
require Enemy
require Item

:shop_buy_helper(game_state, inventory)
    names_and_prices = inventory.map(x -> x.name + " - "+x.sell_price())
    option = get_option_or_go_back(names_and_prices)
    while option != -1
        # Make sure the option is valid
        if option >= 0 && option < inventory.size() 
            item_buying = inventory[option]
            if game_state.player.current_gold() >= item_buying.sell_price()
                game_state.player.change_gold(0 - item_buying.sell_price())
                inventory.remove!(option)
                game_state.player.acquire_item(item_buying.name)
                inform("You bought a "+item_buying.name)
                inform("You have "+game_state.player.current_gold()+" gold remaining")
            else
                inform("Sorry, you don't have enough gold")
            end
        end
        names_and_prices = inventory.map(x -> x.name + " - "+x.sell_price())
        option = get_option_or_go_back(names_and_prices)
    end
end

:shop_sell_helper(game_state, inventory)
    names_and_prices = game_state.player.get_items().map(x -> x.name + " - " + x.worth)
    option = get_option_or_go_back(names_and_prices)
    while option != -1
        # Make sure the option is valid
        if option >= 0 && option < game_state.player.get_items().size()
            item_selling = game_state.player.get_items()[option]
            game_state.player.change_gold(item_selling.worth)
            game_state.player.remove_item(item_selling)
            inventory[inventory.size()] = item_selling
            inform("You sold your "+item_selling.name)
            inform("You now have "+game_state.player.current_gold() + " gold")
        end
        names_and_prices = game_state.player.get_items().map(x -> x.name + " - " + x.worth)
        option = get_option_or_go_back(names_and_prices)
    end
end

:shop(game_state)
    items_selling = []
    num_selling = random(3, shop_items().size())
    for i = 0; i < num_selling; i++
        items_selling[i] = shop_items().sample()
    end
    print("Welcome to my shop! Buying or selling?")
    option = get_option_or_go_back(["Buying", "Selling"])
    while option != -1
        if option == 0
        # Buying
            shop_buy_helper!(game_state, items_selling)
        else
        # Selling
            shop_sell_helper!(game_state, items_selling)
        end
        option = get_option_or_go_back(["Buying", "Selling"])
    end
end

# Advance to the next level
:next_level(game_state)
    game_state.advance_level()
end

:nap(game_state)
    game_state.player.heal(50)
    print("You take a nice relaxing nap.")
    inform("You recover 50 health.")
end

:talk_to_stranger(game_state)
    event = random(3)
    if event == 0
        print("They appear to be friendly and in a talkative mood")
        inform("You chat about life, love, and the finer things")
    else if event == 1
        print("It was a bandit!")
        inform("After a brief struggle, the bandit makes away with a few of your coins")
        game_state.player.change_gold(random(-15, -3))
        game_state.player.hurt(random(1, 3))
        inform(game_state.player)
    else if event == 2
        print("It is a rich man who is giving away all of his money.")
        inform("He throws you some coins!")
        game_state.player.change_gold(random(15, 30))
        inform(game_state.player)
    end
end

:potion_master(game_state)
    done = 0
    while done != -1
        done = get_option_or_go_back(["Strength Potion", "Dragon-Slaying Potion", "Gold Potion", "Aphrodesiac Potion"])
        if done != -1
            inform("You are not strong enough for my potions traveller")
        end
    end
end

:enter_boss_fight(game_state)
    game_state.start_combat(["Dragon", "Whelp", "Whelp"])
end


:random_fight(game_state)
    game_state.start_combat([generic_enemies().sample()])
end

:acquire_item_helper(game_state, item)
    game_state.player.acquire_item(item)
    inform("You got a "+item)
end

:acquire_item(item)
    game_state -> acquire_item_helper(game_state, item)
end

:squirrel(game_state)
    if game_state.player.current_agility() > 15
        inform("You catch the squirrel")
        game_state.player.acquire_item("Squirrel Hide")
        inform("Squirrel Hide obtained")
    else
        inform("It was too fast and got away")
    end
end

:skeleton_encounter(game_state)
    option = random(3)
    if option == 0
        game_state.start_combat(["Skeleton King", "Skeleton Warrior", "Skeleton Warrior"])
    else
        acquire_item_helper(game_state, "Doot Doot Horn")
    end
end

:wizard_encounter(game_state)
    if game_state.player.class.type != "Mage"
        inform("I have nothing for you "+game_state.player.class)
        return false
    end
    spell_items = spells_to_learn()
    old_spells = game_state.player.get_items().filter(x -> spell_items.contains?(x))
    if old_spells.empty?() == false
        inform("I have a powerful spell for you, but first I must take away your powers")
        for i = 0; i < old_spells.size(); i++
            game_state.player.remove_item(old_spells[i])
        end
    end
    new_spell = spell_items.sample()
    game_state.player.acquire_item(new_spell.name)
    inform("The wizard has bestowed upon you the spell of "+new_spell.name)
end

:get_function_from_option(option)
    if option == "Continue"
        next_level
    else if option == "Shop"
        shop
    else if option == "You see a dead body. Poke it?"
        x -> inform("It jiggles. Gross!!")
    else if option == "A squirrel runs by. Chase it?"
        squirrel
    else if option == "Nap"
        nap
    else if option == "You see a stranger. Approach them?"
        talk_to_stranger
    else if option == "Face the dragon"
        enter_boss_fight
    else if option == "Look for a fight"
        random_fight
    else if option == "You see a potion master selling his wares. Approach him?"
        potion_master
    else if option == "A stick is laying in the muck. Pick it up?"
        acquire_item("Stick")
    else if option == "You spot a rock. Pick it up?"
        acquire_item("Rock")
    else if option == "A mysterious skeleton stares at you in the distance"
        skeleton_encounter
    else if option == "You see a wizard standing in the distance. Approach him?"
        wizard_encounter
    else
        throw "Invalid function name "+option
    end
end

