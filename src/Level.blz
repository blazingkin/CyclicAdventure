require Actions
level_types = ["Swamp", "Forest", "Plains"]
:get_level_type
    level_types.sample()
end


swamp_flavor = ["an eeire swamp. The trees stare back at you", "the bubbling muck of a swamp. Something smells off"]
forest_flavor = ["trees as far as the eye can see", "a squirrel dash up a tree"]
plains_flavor = ["grass blowing in the wind", "cows grazing in the distance"]
boss_flavor = ["a giant dragon standing before you, devastating the landscape", "a horrifying lizard terrorizing the town"]

:level_flavor_text(type)
    
    if type == "Swamp"
        swamp_flavor.sample()
    else if type == "Forest"
        forest_flavor.sample()
    else if type == "Plains"
        plains_flavor.sample()
    else if type == "Boss"
        boss_flavor.sample()
    end

end



:generate_options(type)
    options = ["Continue"]

    if type == "Boss"
        options = ["Continue", "Face the dragon"]
        return options
    end

    if type == "Swamp"
        swamp_options = ["You see a dead body. Poke it?", "A stick is laying in the muck. Pick it up?"]
        len = random(1, swamp_options.size())
        for i = 0; i < len; i++
            options[options.size()] = swamp_options.sample()
        end
    else if type == "Forest"
        forest_options = ["A squirrel runs by. Chase it?"]
        len = random(1, forest_options.size())
        for i = 0; i < len; i++
            options[options.size()] = forest_options.sample()
        end
    else if type == "Plains"
        plains_options = ["Nap"]
        len = random(1, plains_options.size())
        for i = 0; i < len; i++
            options[options.size()] = plains_options.sample()
        end
    end

    generic_options = ["You see a stranger. Approach them?", "Look for a fight", "You see a potion master selling his wares. Approach him?"]
    len = random(1, generic_options.size())
    for i = 0; i < len; i++
        options[options.size()] = generic_options.sample()
    end

    options.unique()
end


constructor Level(number)
    if number == 0
        type = "Boss"
    else
        type = get_level_type()
    end
    options = generate_options(type)
    option_functions = options.map(x -> get_function_from_option(x))

    hidden_options = []

    :number_of_options
        options.size() - hidden_options.size()
    end

    :effective_options
        options.filter(x -> hidden_options.contains?(x) == false)
    end

    :effective_option_functions
        effective_options().map(x -> get_function_from_option(x))
    end

    :execute_option(num, game_state)
        func = effective_option_functions()[num]
        hidden_options[hidden_options.size()] = effective_options()[num]
        func!(game_state)
    end

    :show
        level_flavor_text(type)
    end

    :reset_hidden
        hidden_options = []
    end

end
