import GameUtil

# use signature is Item, CombatState -> void
constructor Item(name, worth, use)

    :==(other)
        name == other.name
    end

    :show
        name + " " + worth + " " + use
    end

    :get_name
        name
    end

    :sell_price
        (worth * 1.3).floor()
    end

end

items = []

:use_potion(item, combat_state, amount)
    combat_state.get_player().heal(amount)
    combat_state.get_player().remove_item(item)

    print("The potion restores some health")
    inform("You are now at "+combat_state.get_player().get_health()+"hp")
    return true
end

:simple_damage_item_helper(item, combat_state, message, damage, crit_chance)
    print("Who would you like to hit?")
    enemies = combat_state.get_enemies()
    enemy_names = enemies.map(x -> x.name + " - " +x.health + "hp")
    enemy_number = get_option_or_go_back(enemy_names)
    if enemy_number == -1
        return false
    end
    enemy = combat_state.get_enemies()[enemy_number]
    dmg = damage + random(0 - damage / 4, damage / 4)
    crit = random(0, crit_chance) == 0
    if crit
        dmg = dmg * 3
    end
    enemy.hurt(dmg)
    inform(message+enemy.name+" for "+dmg+" damage")
    if crit
        inform("It's a critical hit!")
    end
    return true
end

:complex_damage_item_helper(item, state, message, damage_formula, crit_chance)
    simple_damage_item_helper(item, state, message, damage_formula(state), crit_chance)
end

:complex_damage_item(message, damage_formula, crit_chance)
    item, state -> complex_damage_item_helper(item, state, message, damage_formula, crit_chance)
end

:simple_damage_item(message, damage, crit_chance)
    item, state -> simple_damage_item_helper(item, state, message, damage, crit_chance)
end

:mystic_staff(item, combat_state)
    to_hit = random(1, 3)
    spells = ["You launch a fireball at ", "A spark shoots out of the end of your staff at ", "You bash your staff at "]
    for i = 0; i < to_hit; i++
        enemy = combat_state.get_enemy()
        dmg = combat_state.get_player().intelligence
        dmg = dmg + random(-5, 5)
        enemy.hurt(dmg)
        inform(spells.sample() + enemy.name + " dealing "+dmg+" damage")
    end
    return true
end

:meme_text(msg)
    inform(msg)
    return false
end

:sling(item, combat_state)
    if combat_state.get_player().get_items().contains?(name_to_item("Rock"))
        # If they have a rock, then they can use it
        combat_state.get_player().remove_item(name_to_item("Rock"))
        enemy = combat_state.get_enemy()
        dmg = combat_state.get_player().strength + combat_state.get_player().agility
        dmg = dmg + random(-3, 5)
        enemy.hurt(dmg)
        inform("You shot the "+enemy.name+" with a rock for "+dmg+" damage")
    else
        # Otherwise, meme text
        meme_text("This seems rather useless")
    end
end

:shop_items
    names = ["Small Potion", "Potion", "Large Potion", "Sling", "Broadsword", "Knife"]
    names.map(x -> name_to_item(x))
end

:spells_to_learn
    names = ["Firestorm", "Lightning Strike", "Healing Hand", "Execute"]
    names.map(x -> name_to_item(x))
end

:execute_item(item, combat_state)
    enemy = combat_state.get_enemy()
    while enemy.name == "Dragon"
        if combat_state.get_enemies().size() == 1
            inform("Nice try, but that doesn't work")
            return false
        end
        enemy = combat_state.get_enemy()
    end
    enemy.hurt(enemy.health)
    inform("You executed the "+enemy.name)
end

:healing_hand_item(item, combat_state)
    healing_amount = combat_state.get_player().intelligence * 2
    combat_state.get_player().heal(healing_amount)
    inform("You have healed yourself for "+healing_amount)
end

:firestorm_item(item, combat_state)
    base_dmg = (combat_state.get_player().intelligence / 2).floor()
    for i = 0; i < combat_state.get_enemies().size(); i++
        enemy = combat_state.get_enemies()[i]
        dmg = base_dmg + random(-5, 3)
        enemy.hurt(dmg)
        inform("The "+enemy.name+" is burned for "+dmg)
    end
end

:name_to_item(name)
    if name == "Small Potion"
        Item(name, 10, (item, cs -> use_potion(item, cs, 25)))
    else if name == "Potion"
        Item(name, 20, (item, cs -> use_potion(item, cs, 50)))
    else if name == "Large Potion"
        Item(name, 40, (item, cs -> use_potion(item, cs, 100)))
    else if name == "Stick"
        Item(name, 1, simple_damage_item("You whack your stick at ", 12, 4))
    else if name == "Mystic Staff"
        Item(name, 50, mystic_staff)
    else if name == "Squirrel Hide"
        Item(name, 25, (x,y -> meme_text("It feels soft to the touch. Probably not very good for combat though.")))
    else if name == "Doot Doot Horn"
        Item(name, 100, (x,y -> meme_text("Doot Doot")))
    else if name == "Rock"
        Item(name, 1, simple_damage_item("You throw a rock at ", 5, 3))
    else if name == "Sling"
        Item(name, 20, sling)
    else if name == "Broadsword"
        Item(name, 300, simple_damage_item("You cleave the enemy ", 50, 2))
    else if name == "Knife"
        Item(name, 200, simple_damage_item("You stab at the enemy ", 30, 3))
    else if name == "Lightning Strike"
        Item(name, 0, complex_damage_item("You cast a lightning bolt at ", (state -> state.get_player().intelligence + random(0, 10)), 3))
    else if name == "Execute"
        Item(name, 0, execute_item)
    else if name == "Healing Hand"
        Item(name, 0, healing_hand_item)
    else if name == "Firestorm"
        Item(name, 0, firestorm_item)
    else
        throw "Invalid item name "+ name
    end
end

## Napalm
## Blanket
